package git.scathiesgit.dao;

import git.scathiesgit.util.ConnectionManager;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.OptionalInt;
import java.util.function.Consumer;
import java.util.function.Function;

public class Executor {

    public OptionalInt executeUpdate(String sql, int autoGeneratedKeys, Consumer<PreparedStatement> consumer) {
        try (var connection = ConnectionManager.open();
             var statement = connection.prepareStatement(sql, autoGeneratedKeys)) {
            consumer.accept(statement);

            statement.executeUpdate();
            OptionalInt result = OptionalInt.empty();
            if (autoGeneratedKeys == Statement.RETURN_GENERATED_KEYS) {
                var resultSet = statement.getGeneratedKeys();
                if (resultSet.next()) {
                    result = OptionalInt.of(resultSet.getInt(1));
                }
            }
            return result;
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    public <T> T executeQuery(String sql, Consumer<PreparedStatement> consumer, Function<ResultSet, T> mapper) {
        try (var connection = ConnectionManager.open(); var statement = connection.prepareStatement(sql)) {
            consumer.accept(statement);
            var resultSet = statement.executeQuery();
            return mapper.apply(resultSet);
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }
}
